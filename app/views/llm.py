import streamlit as st
import os
import sys
import datetime
import glob

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from src.speech_to_text import WhisperLiveTranscription

# Instanciation du transcripteur
transcriber = WhisperLiveTranscription(
    model_id="openai/whisper-small", language="french"
)
# Ne marche pas tr√®s bien pour les transcriptions √† la vol√©e


def llm_page():
    st.title("Requ√™te du mod√®le")
    st.subheader("Interrogez le LLM via votre voix ou texte")

    # Initialisation de l'√©tat de session
    if "recording" not in st.session_state:
        st.session_state.recording = False
    if "transcription" not in st.session_state:
        st.session_state.transcription = ""
    if "text_query" not in st.session_state:
        st.session_state.text_query = ""
    if "file" not in st.session_state:
        st.session_state.file = ""

    # Contr√¥les d'enregistrement
    col1, col2 = st.columns(2)

    if col1.button("üé§ D√©marrer l'enregistrement"):
        st.session_state.recording = True

        # Cr√©ation du fichier o√π les transcriptions seront stock√©es
        # timestamp YYYYMMDD_HHMM :
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M")
        # Cr√©er le fichier texte vide avec son timestamp
        st.session_state.file = f"transcription_{timestamp}.txt"
        with open(st.session_state.file, "a"):
            pass
            # on ira ensuite le remplir via speech_to_text.py

        transcriber.start_recording()
        st.info("Enregistrement en cours...")

    if col2.button("‚èπÔ∏è Arr√™ter l'enregistrement"):
        if st.session_state.recording:
            st.session_state.recording = False
            transcriber.stop_recording()
            st.success("Enregistrement termin√©")

        # Affichage de la transcription
        with open(st.session_state.file, "r", encoding="utf-8") as f:
            transcription = f.read()
        st.session_state.transcription = transcription

        if st.session_state.transcription:
            st.session_state.text_query = st.session_state.transcription
            st.text_area("Transcription :", st.session_state.text_query, height=200)
        else:
            st.warning("Aucune transcription trouv√©e")
            st.session_state.text_query = st.text_input(
                "Ou entrez votre question ici :"
            )

    # R√©sultat du LLM
    if st.button("Soumettre"):
        # Appeler votre LLM ici (√† remplacer par un r√©el appel)
        response = f"R√©ponse simul√©e pour : {st.session_state.text_query}"
        st.write("R√©ponse du LLM :", response)
